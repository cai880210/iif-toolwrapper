    /**
     * Service operation
     * @param inputUrl Input url
     * @return Response message subtree
     */
    public OMElement ${operationname}(${parameters}) {

        infolog("========= PROCESSING REQUEST =========");
	infolog("Using toolwrapper version 0.5.0");
        infolog("Using service: ${global_project_prefix}${servicename}Service");

	infolog("Using outputdir: " + ${outputdir} );

        MessageContext msgCtx = MessageContext.getCurrentMessageContext();
        msgCtx.setProperty("ConfigContextTimeoutInterval", "300000");

	String bits[];
	String fileName;
	String outputdir = ${outputdir};
	Path path = null;

	Boolean is_inputdir = ${is_inputdir};
	Boolean input_is_url = true;
	String type;

	${evaluationId}

        String processingUnit = this.getValueOfServiceParameter("processingUnit");
        if (processingUnit != null && !processingUnit.isEmpty()) {
            infolog("Parameter processingUnit from services.xml: "+processingUnit);
            processing_unitid = processingUnit;
        }

        OMFactory fac = OMAbstractFactory.getOMFactory();
        OMNamespace omNs = fac.createOMNamespace(
                "${project_namespace}", "tns");

        // Required for copying output files to a public web server directory
        String publicHttpAccessDir = getValueOfServiceParameter("publicHttpAccessDir");

	// Check if the public web server directory exists
        if (!new File(publicHttpAccessDir).isDirectory()) {
            errorlog("The output directory " + publicHttpAccessDir + " does not exist. Check "
                    + "publicHttpAccessDir parameter in the service configuration");
            return ${operationname}Result(fac, omNs);
        }

	// Check if the public output (file)dir exists, otherwise create it
	String timeStamp = Long.toString(System.currentTimeMillis() / 1000L);

	String publicOutputBaseFileDir = publicHttpAccessDir + 
					"${global_project_prefix}${servicename}Service" + File.separator +
					${evaluationIdDir} File.separator +
					timeStamp + File.separator;

	// Check if the public output (log)dir exists, otherwise create it
	String publicOutputLogDir = publicHttpAccessDir + 
			    "${global_project_prefix}${servicename}Service" + File.separator +
			    ${evaluationIdDir} File.separator +
			    timeStamp + File.separator + 
			    "processLog" + File.separator;
	if (!new File(publicOutputLogDir).isDirectory()) {
	    File publicOutputDirLog = new File(publicOutputLogDir);
	    try {
		if (publicOutputDirLog.mkdirs()) {
		    infolog("Created directory: " + publicOutputLogDir);
		} else {
		    errorlog("Could not create the public (log)output directory " + publicOutputLogDir);
		    return ${operationname}Result(fac, omNs);
		}
	    } catch(Exception e){
		StringWriter sw = new StringWriter();
		PrintWriter pw = new PrintWriter(sw);
		e.printStackTrace(pw);
		errorlog(sw.toString());
		return ${operationname}Result(fac, omNs);
	    }
	}

	try {
	        logger.addAppender(new FileAppender(new SimpleLayout(), publicOutputLogDir + "result.log"));
	} catch (Exception e) {
	        e.printStackTrace();
	}

        // Required for providing access to output files in a public web server directory
        String publicHttpAccessUrl = getValueOfServiceParameter("publicHttpAccessUrl");
	publicHttpAccessUrl = publicHttpAccessUrl + 
			      "${global_project_prefix}${servicename}Service" + "/" + ${evaluationIdDir} "/" +
			      timeStamp + "/";

        // Command pattern variables key value pairs
        HashMap cliCmdKeyValPairs = new HashMap<String, String>();

${inputsection}

        // definition of output file name(s)
#foreach( $outfileitem in $outfileitems )
${outfileitem}
#end

        // Command execution
        long startMillis = System.currentTimeMillis();
        process(cliCmdKeyValPairs, ${opid}, ${outputstream});
        long timeMillis = System.currentTimeMillis() - startMillis;
        processing_time = (int) timeMillis;

${outputsection}

        if(!processing_success) {
            errorlog("An error occurred while executing the process");
            return ${operationname}Result(fac, omNs);
        }

        // success
        processing_success = true;
        processing_returncode = 0;
        infolog("Process finished successfully after "
                    + timeMillis + " milliseconds.");
        infolog("Service request has been processed successfully");
        OMElement result = ${operationname}Result(fac, omNs);
#foreach( $resultelement in $resultelements )
${resultelement}
#end
        return result;
    }

    /**
     *
     * @param fac OMElement factory
     * @param omNs OMNamespace Namespace of the elements created
     * @return Subtree of the result message
     */
    OMElement ${operationname}Result(OMFactory fac, OMNamespace omNs) {
        OMElement result = fac.createOMElement("result", omNs);
        // processing_success
        OMElement successElm = fac.createOMElement("success", omNs);
        successElm.setText(String.valueOf(processing_success));
        result.addChild(successElm);
        // processing_returncode
        OMElement returncodeElm = fac.createOMElement("returncode", omNs);
        returncodeElm.setText(String.valueOf(processing_returncode));
        result.addChild(returncodeElm);
        // processing_time
        OMElement proctimeElm = fac.createOMElement("time", omNs);
        proctimeElm.setText(String.valueOf(processing_time));
        result.addChild(proctimeElm);
        // processing_log
        OMElement processingLogElm = fac.createOMElement("log", omNs);
        processingLogElm.setText(String.valueOf(processing_log));
        result.addChild(processingLogElm);
        // processing_message
        OMElement processingMsgElm = fac.createOMElement("message", omNs);
        processingMsgElm.setText(String.valueOf(processing_message));
        result.addChild(processingMsgElm);
        return result;
    }
