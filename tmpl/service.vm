/*
 * Copyright ${global_year} The ${global_project_prefix} Project Consortium
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package ${global_package_name};

import ${global_package_name}.proc.CommandLineProcess;
import ${global_package_name}.util.FileUtils;
import ${global_package_name}.util.StringUtils;
import ${global_package_name}.util.DownloaderUtils;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Iterator;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.description.Parameter;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import org.apache.log4j.FileAppender;
import org.apache.log4j.BasicConfigurator;

/**
 * Simple copy version 10 service class.
 *
 * @author ${global_project_prefix} Project Consortium
 * @version ${global_wrapper_version}
 */
public class ${project_midfix} {
    /**
     * Static mime types / file extentions.
     */

    HashMap mimeTypeExtensions;
    /**
     * Static logger variable.
     */
    private static Logger logger = Logger.getLogger(${project_midfix}.class.getName());

    /*
     * These variables can be mapped to an output port using the OutputMapping
     * property in the output configuration file (data types must be the same).
     *
     */
    private boolean processing_success;
    private int processing_returncode;
    private String processing_message;
    private String processing_log;
    private int processing_time;
    private String processing_unitid;

    {
        processing_success = false;
        processing_returncode = -1;
        processing_message = "";
        processing_log = "";
        processing_time = 0;
        processing_unitid = "http://null";
    }

    /**
     * Apply process to the input object.
     * @param inImgFile Input image file.
     * @throws IOException
     */
    private boolean process(HashMap<String, String> cliCmdKeyValPairs, int opid, String outputstream) {

	mimeTypeExtensions = new HashMap<String,String>();
        mimeTypeExtensions.put("text/plain", "txt");
        mimeTypeExtensions.put("image/tiff", "tif");
        mimeTypeExtensions.put("image/png", "png");
        mimeTypeExtensions.put("image/jpeg", "jpg");
        mimeTypeExtensions.put("application/xml", "xml");

        // Assigning values to the variables used in the command pattern.
        // If additional variables are required, they must be added in the
        // eu.impact_project.iif.tw.service.CommandPatternVariables class.
        String cliCmdPattern = getValueOfServiceParameter("cliCommand" + opid);

        // Command line process
        CommandLineProcess clp =
                new CommandLineProcess(cliCmdPattern, cliCmdKeyValPairs, false, outputstream);
        try {
            clp.init();
        } catch (IOException ex) {
            processing_message = "I/O Exception. " + ex.getMessage();
            processing_success = false;
            return false;
        }
        clp.execute();
        processing_success = (clp.getCode() == 0);
        processing_returncode = clp.getCode();
        processing_log += clp.getProcessingLog();

        // The return codes of the tool should be documented here by
        // creating a case for each code and assigning the corresponding
        // message.
        switch (processing_returncode) {
            case 0:
                processing_message = "Process finished successfully with code 0";
                infolog(processing_message);
                break;
            case -1:
                processing_message = "Process result is undefined with code -1";
                errorlog(processing_message);
                break;
            default:
                processing_message = "Process failed with error code " + processing_returncode + ". ";
                errorlog(processing_message);
                break;
        }

        return processing_success;
    }

#foreach( $operation.Trunk in $operations )
$operation.Code
#end

    /**
     * Get the value of a service parameter defined in the
     * resources/services.xml.
     * @param parm Parameter defined in the services.xml
     * @return Value of the parameter
     */
    private String getValueOfServiceParameter(String parm) {
        MessageContext msgCtx = MessageContext.getCurrentMessageContext();
        Parameter patternParameter = msgCtx.getParameter(parm);
        String ptn = (String) patternParameter.getValue();
        return ptn;
    }

    /**
     * Informative log
     * @param msg Message
     */
    private void infolog(String msg) {
        processing_log += msg + ".\n";
        processing_message = msg;
        logger.info(msg);
    }

    /**
     * Error log
     * @param msg Message
     */
    private void errorlog(String msg) {
        if(processing_returncode == 0)
            processing_returncode = 1;
        processing_success = false;
        logger.info("Service assigned error code 1");
        processing_log += "ERROR: " + msg + ".\n";
        processing_message = "Service request processing ended with an error";
        logger.error(msg);
    }
}
